@page "/buyers/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]

<h3 class="card-title">Buyers</h3>
<br />

@if (Buyers == null)
{
    <div class="alert alert-info">Loading Buyers...</div>
}
else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>Name</th>
                <th>Contact</th>
                <th>Address</th>
                <th>Email Address</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var buyer in Buyers)
            {
            <tr>
                <td>@buyer.Name</td>
                <td>@buyer.Contact</td>
                <td>@buyer.Address</td>
                <td>@buyer.EmailAddress</td>
                <td>
                    <a href="/buyers/view/@buyer.Id" class="btn btn-primary">
                        <span class="oi oi-book"></span>
                    </a>
                    <a href="/buyers/edit/@buyer.Id" class="btn btn-warning">
                        <span class="oi oi-pencil"></span>
                    </a>
                    <button class="btn btn-danger" @onclick="@(()=>Delete(buyer.Id))">
                        <span class="oi oi-delete"></span>
                    </button>
                </td>
            </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Buyer> Buyers;

    protected async override Task OnInitializedAsync()
    {
        Buyers = await _client.GetFromJsonAsync<List<Buyer>>($"{Endpoints.BuyersEndpoint}");
    }

    async Task Delete(int buyerId)
    {
        var buyer = Buyers.First(q => q.Id == buyerId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {buyer.Name}?");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.BuyersEndpoint}/{buyerId}");
            await OnInitializedAsync();
        }
    }
}
